На этом уровне мы покажем основные взаимодействия системы Теплый дом с внешними пользователями и системами. На диаграмме контекста нужно показать такие элементы:
User — пользователь системы "Теплый дом", который использует функционал системы для управления отоплением в доме и проверки температуры.
Specialist — специалист, подключение системы отопления в доме к текущей версии системы.
SmartHome System — основная система, которая организует удалённое управление отоплением в доме.
Sensor — датчики отопления, включение/выключения отопления, возвращает актуальную температуру.
ПО датчиков предоставляют Rest API

1. Изучите функциональность монолитного приложения:
    Управление отоплением. Пользователи могут удалённо включать/выключать отопление в своих домах.
    Мониторинг температуры. Система получает данные о температуре с датчиков, установленных в домах. Пользователи могут просматривать текущую температуру в своих домах через веб-интерфейс.
2. Проанализируйте архитектуру монолитного приложения:
    Язык программирования: Java
    База данных: PostgreSQL
    Архитектура: Монолитная, все компоненты системы (обработка запросов, бизнес-логика, работа с данными) находятся в рамках одного приложения.
    Взаимодействие: Синхронное, запросы обрабатываются параллельно.
    Развёртывание: Требует остановки всего приложения.
3. Определите домены и границы контекстов.
    Домены: Отопления, видео, ворот, света.
    Контексты: контексты отопления, контекст видео, контекст ворот, контекст света.
4. Подробно опишите, какие проблемы создаёт монолитного решение для компании в контексте текущих бизнес-задач.
    В контексте текущих задач никаких, для небольших приложения всегда лучше начинать с монолита.
     В контексте будущих задач, когда добавляются датчики  другого типа,
    то лучше перейти на микросервисы. Новый тип датчика, например видео, ворота, свет будет выделять в отдельные микросервис.
    Также текущее решение с отоплением преобразуем в микросервис Отопления. Сервис ворот и света будет независим друг от друга,
    но мы сможем параллельно разрабатывать каждый микросервис, масштабировать в зависимости от нагрузки.
    Плюс каждый новый тип будет иметь различные сценарии и нам нет необходимости разбираться в видео сценарии, если мы работаем с воротами.
